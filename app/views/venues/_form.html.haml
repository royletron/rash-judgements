= simple_form_for(@venue) do |f|
  = f.error_notification
  =gmaps( :map_options => { "libraries" => ["places"], :container_class => "", :id => "map", :class => "medium-map", :center_on_user => true, :zoom => 15} )
  .form-inputs
    .row-fluid
      .span6
        .control-group
          %label.control-label Name
          .controls
            %input.typeahead{:type => "text", "data-provide" => "typeahead", :class => "input-block-level", :id => "venue_name", :name => "venue[name]"}
            %input#venueID{:type => "hidden"}
        .control-group
          %label.control-label Name
          .controls
            %input.typeahead{:type => "text", "data-provide" => "typeahead", :class => "input-block-level", :id => "venue_test"}
        = f.input :description, :as => :text, :input_html => { :rows => 5, :class => "input-block-level" }
      .span6
        .row-fluid
          .span6
            = f.input :address, :disabled => true, :input_html => { :class => "input-block-level" }
            = f.input :city, :disabled => true, :input_html => { :class => "input-block-level" }
            = f.input :region, :disabled => true, :input_html => { :class => "input-block-level" }
          .span6
            = f.input :postcode, :disabled => true, :input_html => { :class => "input-block-level" }
            = f.input :phone, :disabled => true, :input_html => { :class => "input-block-level" }
            = f.input :website, :disabled => true, :input_html => { :class => "input-block-level" }
        = f.input :latitude, :as => :hidden 
        = f.input :longitude, :as => :hidden
  .form-actions
    = f.button :submit

:javascript
  var map;
  var markersArray = [];
  $('#venue_name').typeahead({
      source: function(query, process) {
          map = Gmaps.map.serviceObject;
  			  var longs = map.getCenter().lng();
  			  var lats = 	map.getCenter().lat();
          objects = [];
          map = {};
          return $.ajax({
              url: '/get_places',
  			      dataType: 'json',
  			      type: 'GET',
  			      data: {
  			        longs: longs,
  							lats: lats,
  							term: query
  			      },
              success: function(json) {
                $.each(json, function(i, object) {
                  map[object.name+", "+object.vicinity] = object;
                  objects.push(object.name+", "+object.vicinity);
                });
                process(objects);
              }
          });
      },
      updater: function(item) {
        $('#venueID').val(map[item].id);
        clearOverlays();
        deleteOverlays();
        var object = map[item];
        var latlng = new google.maps.LatLng(object.lat, object.lng);
        getPlace(object.reference)
        addMarker(latlng);
        $('#venue_name').val(map[item].name);
        return item;
      },
      highlighter: function(item){
        var query = this.query.replace(/[\-\[\]{}()*+?.,\\\^$|#\s]/g, '\\$&')
        return item.replace(new RegExp('(' + query + ')', 'ig'), function ($1, match) {
          return '<strong>' + match + '</strong>'
        });
        
      }
  });
  
  function getPlace(reference) {
    $.ajax({
      url: '/get_info',
      dataType: 'json',
      type: 'GET',
      data: {
        reference: reference
      },
      success: function(json) {
        console.log(json);
        var address = json.street_number;
        if(address != null){ address = address + " "; }
        else { address = ""; }
        address = address + json.street;
        $('#venue_address').val(address);
        $('#venue_city').val(json.city);
        $('#venue_region').val(json.region);
        $('#venue_postcode').val(json.postal_code);
        $('#venue_phone').val(json.formatted_phone_number);
        $('#venue_website').val(json.website);
      }
    });
  }
  function addMarker(location) {
    marker = new google.maps.Marker({
      position: location,
      map: Gmaps.map.serviceObject
    });
    Gmaps.map.serviceObject.setCenter(marker.getPosition());
    markersArray.push(marker);
  }

  // Removes the overlays from the map, but keeps them in the array
  function clearOverlays() {
    if (markersArray) {
      for (i in markersArray) {
        markersArray[i].setMap(null);
      }
    }
  }

  // Shows any overlays currently in the array
  function showOverlays() {
    if (markersArray) {
      for (i in markersArray) {
        markersArray[i].setMap(map);
      }
    }
  }

  // Deletes all markers in the array by removing references to them
  function deleteOverlays() {
    if (markersArray) {
      for (i in markersArray) {
        markersArray[i].setMap(null);
      }
      markersArray.length = 0;
    }
  }
  var service;
  var geocoder;

  $('#venue_test').typeahead({
    source: function(query, process) {
      if (service == null)
      {
        service = new google.maps.places.AutocompleteService();
        geocoder = new google.maps.Geocoder();
      }
      service.getPlacePredictions({ input: query }, function(predictions, status) {
        if (status == google.maps.places.PlacesServiceStatus.OK) {
          process($.map(predictions, function(prediction) {
            return prediction.description;
          }));
        }
      });
    },
    updater: function (item) {
      geocoder.geocode({ address: item }, function(results, status) {
        if (status != google.maps.GeocoderStatus.OK) {
          alert('Cannot find address');
          return;
        }
        Gmaps.map.serviceObject.setCenter(results[0].geometry.location);
      });
      return item;
    }
  });